const MEMSWAP_ABI = [
  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },
  { inputs: [], name: 'AuthorizationIsExpired', type: 'error' },
  { inputs: [], name: 'AuthorizationIsInsufficient', type: 'error' },
  { inputs: [], name: 'AuthorizationIsNotPartiallyFillable', type: 'error' },
  { inputs: [], name: 'IntentIsCancelled', type: 'error' },
  { inputs: [], name: 'IntentIsExpired', type: 'error' },
  { inputs: [], name: 'IntentIsFilled', type: 'error' },
  { inputs: [], name: 'IntentIsNotPartiallyFillable', type: 'error' },
  { inputs: [], name: 'InvalidSignature', type: 'error' },
  { inputs: [], name: 'InvalidSolution', type: 'error' },
  { inputs: [], name: 'MerkleTreeTooLarge', type: 'error' },
  { inputs: [], name: 'Unauthorized', type: 'error' },
  { inputs: [], name: 'UnsuccessfullCall', type: 'error' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'intentHash',
        type: 'bytes32',
      },
    ],
    name: 'IntentCancelled',
    type: 'event',
  },
  { anonymous: false, inputs: [], name: 'IntentPosted', type: 'event' },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'intentHash',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'maker',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'filler',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint128',
        name: 'amountIn',
        type: 'uint128',
      },
      {
        indexed: false,
        internalType: 'uint128',
        name: 'amountOut',
        type: 'uint128',
      },
    ],
    name: 'IntentSolved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'intentHash',
        type: 'bytes32',
      },
    ],
    name: 'IntentValidated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUTHORIZATION_TYPEHASH',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'INTENT_TYPEHASH',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'authorization',
    outputs: [
      { internalType: 'uint128', name: 'maximumAmountIn', type: 'uint128' },
      { internalType: 'uint128', name: 'minimumAmountOut', type: 'uint128' },
      { internalType: 'uint32', name: 'blockDeadline', type: 'uint32' },
      { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: 'intent',
        type: 'tuple',
      },
      { internalType: 'address', name: 'authorizedFiller', type: 'address' },
      {
        components: [
          { internalType: 'uint128', name: 'maximumAmountIn', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'minimumAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint32', name: 'blockDeadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
        ],
        internalType: 'struct Memswap.Authorization',
        name: 'auth',
        type: 'tuple',
      },
    ],
    name: 'authorize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent[]',
        name: 'intents',
        type: 'tuple[]',
      },
    ],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'intentHash', type: 'bytes32' },
      { internalType: 'address', name: 'authorizedFiller', type: 'address' },
      {
        components: [
          { internalType: 'uint128', name: 'maximumAmountIn', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'minimumAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint32', name: 'blockDeadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
        ],
        internalType: 'struct Memswap.Authorization',
        name: 'auth',
        type: 'tuple',
      },
    ],
    name: 'getAuthorizationHash',
    outputs: [
      { internalType: 'bytes32', name: 'authorizationHash', type: 'bytes32' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: 'intent',
        type: 'tuple',
      },
    ],
    name: 'getIntentHash',
    outputs: [{ internalType: 'bytes32', name: 'intentHash', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'intentStatus',
    outputs: [
      { internalType: 'bool', name: 'isValidated', type: 'bool' },
      { internalType: 'bool', name: 'isCancelled', type: 'bool' },
      { internalType: 'uint128', name: 'amountFilled', type: 'uint128' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: '',
        type: 'tuple',
      },
    ],
    name: 'post',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: 'intent',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'to', type: 'address' },
          { internalType: 'bytes', name: 'data', type: 'bytes' },
          { internalType: 'uint128', name: 'amount', type: 'uint128' },
        ],
        internalType: 'struct Memswap.Solution',
        name: 'solution',
        type: 'tuple',
      },
    ],
    name: 'solve',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: 'intent',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'to', type: 'address' },
          { internalType: 'bytes', name: 'data', type: 'bytes' },
          { internalType: 'uint128', name: 'amount', type: 'uint128' },
        ],
        internalType: 'struct Memswap.Solution',
        name: 'solution',
        type: 'tuple',
      },
    ],
    name: 'solveWithOnChainAuthorizationCheck',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent',
        name: 'intent',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'to', type: 'address' },
          { internalType: 'bytes', name: 'data', type: 'bytes' },
          { internalType: 'uint128', name: 'amount', type: 'uint128' },
        ],
        internalType: 'struct Memswap.Solution',
        name: 'solution',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'uint128', name: 'maximumAmountIn', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'minimumAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint32', name: 'blockDeadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
        ],
        internalType: 'struct Memswap.Authorization',
        name: 'auth',
        type: 'tuple',
      },
      { internalType: 'bytes', name: 'signature', type: 'bytes' },
    ],
    name: 'solveWithSignatureAuthorizationCheck',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
          {
            internalType: 'contract IERC20',
            name: 'tokenOut',
            type: 'address',
          },
          { internalType: 'address', name: 'maker', type: 'address' },
          { internalType: 'address', name: 'filler', type: 'address' },
          { internalType: 'address', name: 'referrer', type: 'address' },
          { internalType: 'uint32', name: 'referrerFeeBps', type: 'uint32' },
          {
            internalType: 'uint32',
            name: 'referrerSurplusBps',
            type: 'uint32',
          },
          { internalType: 'uint32', name: 'deadline', type: 'uint32' },
          { internalType: 'bool', name: 'isPartiallyFillable', type: 'bool' },
          { internalType: 'uint128', name: 'amountIn', type: 'uint128' },
          { internalType: 'uint128', name: 'startAmountOut', type: 'uint128' },
          {
            internalType: 'uint128',
            name: 'expectedAmountOut',
            type: 'uint128',
          },
          { internalType: 'uint128', name: 'endAmountOut', type: 'uint128' },
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
        ],
        internalType: 'struct Memswap.Intent[]',
        name: 'intents',
        type: 'tuple[]',
      },
    ],
    name: 'validate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

const WETH_ABI = [
  {
    constant: true,
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'guy', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'src', type: 'address' },
      { name: 'dst', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'wad', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'dst', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'deposit',
    outputs: [],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '', type: 'address' },
      { name: '', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'src', type: 'address' },
      { indexed: true, name: 'guy', type: 'address' },
      { indexed: false, name: 'wad', type: 'uint256' },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'src', type: 'address' },
      { indexed: true, name: 'dst', type: 'address' },
      { indexed: false, name: 'wad', type: 'uint256' },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'dst', type: 'address' },
      { indexed: false, name: 'wad', type: 'uint256' },
    ],
    name: 'Deposit',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'src', type: 'address' },
      { indexed: false, name: 'wad', type: 'uint256' },
    ],
    name: 'Withdrawal',
    type: 'event',
  },
] as const

export { MEMSWAP_ABI, WETH_ABI }
